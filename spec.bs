<pre class="metadata">
Title: FLEDGE
Shortname: fledge
Repository: WICG/turtledove
Inline Github Issues: true
Group: WICG
Status: CG-DRAFT
Level: 1
URL: https://wicg.github.io/fledge/
Boilerplate: omit conformance, omit feedback-header
Editor: Paul Jensen, Google https://www.google.com/, pauljensen@google.com
Abstract: Provides a privacy advancing API to facilitate interest group based advertising.
!Participate: <a href="https://github.com/WICG/turtledove">GitHub WICG/turtledove</a> (<a href="https://github.com/WICG/turtledove/issues/new">new issue</a>, <a href="https://github.com/WICG/turtledove/issues?state=open">open issues</a>)
!Commits: <a href="https://github.com/WICG/turtledove/commits/main/spec.bs">GitHub spec.bs commits</a>
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Default Biblio Status: current
Markup Shorthands: markdown yes
Assume Explicit For: yes
</pre>

# Introduction # {#intro}

<em>This section is non-normative</em>

The FLEDGE API facilitates selecting an advertisement to display to a user based on a previous interaction with the advertiser or advertising network.

When a user's interactions with an advertiser indicate an interest in something, the advertiser can ask the browser to record this interest on-device by calling {{Window/navigator}}.{{Navigator/joinAdInterestGroup()}}.  Later, when a website wants to select an advertisement to show to the user, the website can call {{Window/navigator}}.{{Navigator/runAdAuction()}} to ask the browser to conduct an auction where each of these on-device recorded interests are given the chance to calculate a bid to display their advertisement.


<h2 id="joining-interest-groups">Joining Interest Groups</h2>

When a user's interactions with a website indicate that the user may have a particular interest, an advertiser or someone working on behalf of the advertiser (e.g. a demand side platform, DSP) can ask the user's browser to record this interest on-device by calling {{Window/navigator}}.{{Navigator/joinAdInterestGroup()}}.  This indicates an intent to display an advertisement relevant to this interest to this user in the future.


<xmp class="idl">
[SecureContext]
partial interface Navigator {
  Promise<undefined> joinAdInterestGroup(AuctionAdInterestGroup group, double durationSeconds);
};

enum WorkletExecutionMode {
  "compatibility",
  "groupByOrigin",
};

dictionary AuctionAd {
  required USVString renderUrl;
  any metadata;
};

dictionary AuctionAdInterestGroup {
  required USVString owner;
  required USVString name;

  double priority;
  boolean enableBiddingSignalsPrioritization;
  record<USVString, double> priorityVector;
  record<USVString, double> prioritySignalsOverrides;

  WorkletExecutionMode executionMode;
  USVString biddingLogicUrl;
  USVString biddingWasmHelperUrl;
  USVString dailyUpdateUrl;
  USVString trustedBiddingSignalsUrl;
  sequence<USVString> trustedBiddingSignalsKeys;
  any userBiddingSignals;
  sequence<AuctionAd> ads;
  sequence<AuctionAd> adComponents;
};
</xmp>

To join an interest group, given an {{AuctionAdInterestGroup}} |group| and a double |durationSeconds|, perform the following steps. Then return a [=promise type|Promise=]:

1. If [=this=]'s [=relevant global object=]'s [=associated Document=] is not [=allowed to use=] the "join-ad-interest-group" [=policy-controlled feature=], then return [=a promise rejected with=] a "{{NotAllowedError}}" {{DOMException}}.
1. Let interestGroup be a new [=interest group=].
1. Validate the given |group| and set |interestGroup|'s fields accordingly.
    1. Set |interestGroup|'s [=interest group/expiry=] to now plus |durationSeconds|.
    1. If the |group|["{{AuctionAdInterestGroup/owner}}"] [=url/scheme=] is HTTPS, then set |interestGroup|'s [=interest group/owner=] to |group|["{{AuctionAdInterestGroup/owner}}"]. Otherwise, return [=a promise rejected with=] a "{{TypeError}}" {{DOMException}}.
    1. Set |interestGroup|'s [=interest group/name=] to |group|["{{AuctionAdInterestGroup/name}}"].
    1. If |group|["{{AuctionAdInterestGroup/executionMode}}"] is not null:
        1. If it is "compatibility" or "groupByOrigin", then set |interestGroup|'s [=interest group/execution mode=] to it.
        1. Otherwise, return [=a promise rejected with=] a "{{TypeError}}" {{DOMException}}.
    1. If |group|["{{AuctionAdInterestGroup/biddingLogicUrl}}"] is not null:
        1. If it is a valid [=URL=], then set |interestGroup|'s [=interest group/bidding url=] to it.
        1. Otherwise, return [=a promise rejected with=] a "{{TypeError}}" {{DOMException}}.
    1. For each of |group|["{{AuctionAdInterestGroup/biddingWasmHelperUrl}}"], |group|["{{AuctionAdInterestGroup/dailyUpdateUrl}}"], |group|["{{AuctionAdInterestGroup/trustedBiddingSignalsUrl}}"], do the same as step 4.5.
    1. [=list/For each=] |key| in |group|["{{AuctionAdInterestGroup/trustedBiddingSignalsKeys}}"]:
        1. [=list/Append=] |key| to |interestGroup|'s [=interest group/trusted bidding signals keys=].
    1. If |group|["{{AuctionAdInterestGroup/userBiddingSignals}}"] is not null:
        1. Let |interestGroup|'s [=interest group/user bidding signals=] be the result of [=JSON-serializing=] |group|["{{AuctionAdInterestGroup/userBiddingSignals}}"] into a string. If it fails, then return [=a promise rejected with=] a "{{TypeError}}" {{DOMException}}.
    1. [=list/For each=] |ad| in |group|["{{AuctionAdInterestGroup/ads}}"]:
        1. Let ig_ad be a new [=interest group ad=]. If |ad|["{{AuctionAd/renderUrl}}"] is a valid [=URL=], then set |ig_ad|'s [=interest group ad/render url=] to |ad|["{{AuctionAd/renderUrl}}"]. Otherwise, return [=a promise rejected with=] a "{{TypeError}}" {{DOMException}}.
        1. If |ad|["{{AuctionAd/metadata}}"] is not null, let |ig_ad|'s [=interest group ad/metadata=] be the result of [=JSON-serializing=] |ad|["{{AuctionAd/metadata}}"] into a string. If it fails, then return [=a promise rejected with=] a "{{TypeError}}" {{DOMException}}.
        1. [=list/Append=] |ig_ad| to |interestGroup|'s [=interest group/ads=].
    1. [=list/For each=] |ad| in |group|["{{AuctionAdInterestGroup/adComponents}}"]:
        1. Let ig_ad be a new [=interest group ad=]. If |ad|["{{AuctionAd/renderUrl}}"] is a valid [=URL=], then set |ig_ad|'s [=interest group ad/render url=] to |ad|["{{AuctionAd/renderUrl}}"]. Otherwise, return [=a promise rejected with=] a "{{TypeError}}" {{DOMException}}.
        1. If |ad|["{{AuctionAd/metadata}}"] is not null, let |ig_ad|'s [=interest group ad/metadata=] be the result of [=JSON-serializing=] |ad|["{{AuctionAd/metadata}}"] into a string. If it fails, return [=a promise rejected with=] a "{{TypeError}}" {{DOMException}}.
        1. [=list/Append=] |ig_ad| to |interestGroup|'s [=interest group/ad components=].
1. Validate the new interest group |interestGroup|:
    1. If |interestGroup|'s [=interest group/owner=] [=url/scheme=] is not HTTPS, then return false.
    1. If |interestGroup|'s [=interest group/priority=] is infinite, then return false.
    1. For each |url| in |interestGroup|'s [=interest group/bidding url], [=interest group/bidding wasm helper url=], [=interest group/daily update url=], [=interest group/trusted bidding signals url=], return false if |url|:
        1. is not [=same origin=] with |interestGroup|'s [=interest group/owner=].
        1. is not a valid [=URL=].
        1. [=url/scheme=] is not HTTPS.
        1. has non-empty <a href="https://url.spec.whatwg.org/#concept-url-username">username</a> or <a href="https://url.spec.whatwg.org/#concept-url-password">password</a>.
        1. <a href="https://url.spec.whatwg.org/#concept-url-fragment">fragment</a> is not null.
    1. [=list/For each=] |ad| in |interestGroup|'s [=interest group/ads=] (same for |interestGroup|'s [=interest group/ad components=]), return false if |ad|'s [=interest group ad/render url=]:
        1. is not a valid [=URL=].
        1. [=url/scheme=] is not HTTPS.
        1. has non-empty <a href="https://url.spec.whatwg.org/#concept-url-username">username</a> or <a href="https://url.spec.whatwg.org/#concept-url-password">password</a>.
    1. If |interestGroup|'s [=estimate size of an interest group|estimated size=] is greater than 50 KB, return false.
    1. Return true.
1. If the validation step returns false, then return [=a promise rejected with=] a "{{TypeError}}" {{DOMException}}.
1. If the browser is currently storing an interest group with `owner` and `name` that matches |interestGroup|, then remove the currently stored one.
1. Store |interestGroup| in the browserâ€™s list of interest groups.
1. Return a new promise.

To <dfn>estimate size of an [=interest group=]</dfn> |ig|:
1. Let size be the sum of:
    1. [=string/Length=] of [=serialization of an origin|serialization=] of |ig|'s [=interest group/owner=].
    1. [=string/Length=] of |ig|'s [=interest group/name=].
    1. 8 bytes, which is the size of |ig|'s [=interest group/priority=].
    1. [=string/Length=] of |ig|'s [=interest group/execution mode=].
    1. 2 bytes, which is the size of |ig|'s [=interest group/enable bidding signals prioritization=].
    1. [=map/size=] of |ig|'s [=interest group/priority vector=].
    1. [=map/size=] of |ig|'s [=interest group/priority signals overrides=].
    1. [=string/Length=] of [=URL serializer|serialization=] of |ig|'s [=interest group/bidding url=].


<h2 id="running-ad-auctions">Running Ad Auctions</h2>

When a website or someone working on behalf of the website (e.g. a supply side platform, SSP)  wants to conduct an auction to select an advertisement to display to the user, they can call the {{Window/navigator}}.{{Navigator/runAdAuction()}} function, 
providing an auction configuration that tells the browser how to conduct the auction and which on-device recorded interests are allowed to bid in the auction for the chance to display their advertisement.
  
<xmp class="idl">
[SecureContext]
partial interface Navigator {
  Promise<USVString?> runAdAuction(AuctionAdConfig config);
};

dictionary AuctionAdConfig {
  required USVString seller;
  required USVString decisionLogicUrl;
  USVString trustedScoringSignalsUrl;
  sequence<USVString> interestGroupBuyers;
  any auctionSignals;
  any sellerSignals;
  USVString directFromSellerSignals;
  unsigned long long sellerTimeout;
  unsigned short sellerExperimentGroupId;
  record<USVString, any> perBuyerSignals;
  record<USVString, unsigned long long> perBuyerTimeouts;
  record<USVString, unsigned short> perBuyerGroupLimits;
  record<USVString, unsigned short> perBuyerExperimentGroupIds;
  record<USVString, record<USVString, double>> perBuyerPrioritySignals;
  sequence<AuctionAdConfig> componentAuctions;
  AbortSignal? signal;
};
</xmp>


# Structures # {#structures}

<h3 dfn-type=dfn>Interest group</h3>

An interest group is a [=struct=] with the following items:

<dl dfn-for="interest group">
: <dfn>expiry</dfn>
:: A length of time.
: <dfn>owner</dfn>
:: An [=url/origin=].
: <dfn>name</dfn>
:: A [=string=].
: <dfn>priority</dfn>
:: A double.
: <dfn>enable bidding signals prioritization</dfn>
:: A [=boolean=].
: <dfn>priority vector</dfn>
:: Null or an [=ordered map=] whose [=map/key|keys=] are [=strings=] and whose [=map/value|values=] are doubles.
: <dfn>priority signals overrides</dfn>
:: Null or an [=ordered map=] whose [=map/key|keys=] are [=strings=] and whose [=map/value|values=] are doubles.
: <dfn>execution mode</dfn>
:: An [=execution mode=].
: <dfn>bidding url</dfn>
:: Null or a [=URL=].
: <dfn>bidding wasm helper url</dfn>
:: Null or a [=URL=].
: <dfn>daily update url</dfn>
:: Null or a [=URL=].
: <dfn>trusted bidding signals url</dfn>
:: Null or a [=URL=].
: <dfn>trusted bidding signals keys</dfn>
:: Null or a [=list=].
: <dfn>user bidding signals</dfn>
:: Null or a [=string=].
: <dfn>ads</dfn>
:: Null or a [=list=] of [=interest group ad=].
: <dfn>ad components</dfn>
:: Null or a [=list=] of [=interest group ad=].

</dl>

<h3 dfn-type=dfn>Execution mode</h3>

An execution mode is either "compatibility" or "groupByOrigin".

<h3 dfn-type=dfn>Interest group ad</h3>

An interest group ad is a [=struct=] with the following items:

<dl dfn-for="interest group ad">
: <dfn>render url</dfn>
:: A [=URL=].
: <dfn>metadata</dfn>
:: Null or a [=string=].

</dl>