<pre class="metadata">
Title: FLEDGE
Shortname: fledge
Repository: WICG/turtledove
Inline Github Issues: true
Group: WICG
Status: CG-DRAFT
Level: 1
URL: https://wicg.github.io/fledge/
Boilerplate: omit conformance, omit feedback-header
Editor: Paul Jensen, Google https://www.google.com/, pauljensen@google.com
Abstract: Provides a privacy advancing API to facilitate interest group based advertising.
!Participate: <a href="https://github.com/WICG/turtledove">GitHub WICG/turtledove</a> (<a href="https://github.com/WICG/turtledove/issues/new">new issue</a>, <a href="https://github.com/WICG/turtledove/issues?state=open">open issues</a>)
!Commits: <a href="https://github.com/WICG/turtledove/commits/main/spec.bs">GitHub spec.bs commits</a>
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Default Biblio Status: current
Markup Shorthands: markdown yes
Assume Explicit For: yes
</pre>

# Introduction # {#intro}

<em>This section is non-normative</em>

FLEDGE serves remarketing and custom audience use cases and is designed so that it cannot be used by third parties 
to track user browsing behavior across sites.

The FLEDGE API enables on-device auctions in the browser to choose relevant ads from websites the user has previously visited.


<h2 id="joining-interest-groups">Joining Interest Groups</h2>

An interest group owner (such as a DSP working for a site that displays ads) can ask the user's browser to add membership for the interest group
by calling {{Window/navigator}}.{{Navigator/joinAdInterestGroup()}}.


<xmp class="idl">
[SecureContext]
partial interface Navigator {
  Promise<undefined> joinAdInterestGroup(AuctionAdInterestGroup group, double durationSeconds);
};

enum WorkletExecutionMode {
  "compatibility",
  "groupByOrigin",
};

dictionary AuctionAd {
  required USVString renderUrl;
  any metadata;
};

dictionary AuctionAdInterestGroup {
  required USVString owner;
  required USVString name;

  double priority;
  boolean enableBiddingSignalsPrioritization;
  record<USVString, double> priorityVector;
  record<USVString, double> prioritySignalsOverrides;

  WorkletExecutionMode executionMode;
  USVString biddingLogicUrl;
  USVString biddingWasmHelperUrl;
  USVString dailyUpdateUrl;
  USVString trustedBiddingSignalsUrl;
  sequence<USVString> trustedBiddingSignalsKeys;
  any userBiddingSignals;
  sequence<AuctionAd> ads;
  sequence<AuctionAd> adComponents;
};
</xmp>


<h2 id="run-ad-auction">runAdAuction</h2>

An ad space seller for a site that displays ads (most likely the site's SSP, or the site itself) 
can use FLEDGE to run an ad auction to select the most appropriate ads to display to the user. 
The seller calls the navigator.runAdAuction()function, 
providing a configuration that lists interest group owners who are invited to bid. 
Bidding code is only run during the auction for interest groups that the browser is a member of, 
and whose owners have been invited to bid.
  
<xmp class="idl">
[SecureContext]
partial interface Navigator {
  Promise<USVString?> runAdAuction(AuctionAdConfig config);
};

dictionary AuctionAdConfig {
  required USVString seller;
  required USVString decisionLogicUrl;
  USVString trustedScoringSignalsUrl;
  sequence<USVString> interestGroupBuyers;
  any auctionSignals;
  any sellerSignals;
  USVString directFromSellerSignals;
  unsigned long long sellerTimeout;
  unsigned short sellerExperimentGroupId;
  record<USVString, any> perBuyerSignals;
  record<USVString, unsigned long long> perBuyerTimeouts;
  record<USVString, unsigned short> perBuyerGroupLimits;
  record<USVString, unsigned short> perBuyerExperimentGroupIds;
  record<USVString, record<USVString, double>> perBuyerPrioritySignals;
  sequence<AuctionAdConfig> componentAuctions;
  AbortSignal? signal;
};
</xmp>
